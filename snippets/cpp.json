{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "cpp": {
    "prefix": "cpp",
    "body": [
      "#include <bits/stdc++.h>",
      "#define rep(i, n) for (int i = 0; i < (n); ++i)",
      "using namespace std;",
      "using ll = long long;",
      "using P = pair<int, int>;",
      "",
      "int main() {",
      "  $1",
      "  return 0;",
      "}"
    ]
  },
  "cin": {
    "prefix": "cinv",
    "body": [
      "cin >> $1;"
    ]
  },
  "cout": {
    "prefix": "coutv",
    "body": [
      "cout << ${1:ans} << endl;"
    ]
  },
  "sort": {
    "prefix": "sort",
    "body": [
      "sort($1.begin(), $1.end());"
    ]
  },
  "define and input vector": {
    "prefix": "vecin",
    "body": [
      "vector<${1:int}> ${2:v}(${3:n});",
      "rep(${4:i}, $3) cin >> $2[$4];"
    ]
  },
  "infinity": {
    "prefix": "inf",
    "body": [
      "const ll INF = 1e11;"
    ]
  },
  "DP table": {
    "prefix": "dp",
    "body": [
      "const int MAX_N = 1e9;",
      "ll dp[MAX_N][MAX_N];"
    ]
  }
}